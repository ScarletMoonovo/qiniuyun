version: '3.8'

services:
  signaling-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-chat-signaling
    restart: unless-stopped
    ports:
      - "${PORT:-3001}:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3001
      - HOST=0.0.0.0
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:8000}
      - FRONTEND_URL_PROD=${FRONTEND_URL_PROD:-https://your-domain.com}
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    networks:
      - ai-chat-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis (可选 - 用于会话存储和集群支持)
  redis:
    image: redis:7-alpine
    container_name: ai-chat-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-chat-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  ai-chat-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
