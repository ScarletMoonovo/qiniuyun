{
  "id": "snapshot_1758773307730_smx2ryvwf",
  "approvalId": "approval_1758773307726_ojfxu3mkn",
  "approvalTitle": "AI角色扮演聊天功能 - 技术设计文档",
  "version": 1,
  "timestamp": "2025-09-25T04:08:27.730Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# 技术设计文档 - AI角色扮演聊天功能\n\n## 1. 设计概述\n\n### 1.1 设计目标\n- 基于现有React + Ant Design Pro架构，无缝集成AI角色扮演聊天功能\n- 实现高性能的实时语音交互体验，响应时间控制在3秒内\n- 构建可扩展的模块化架构，支持未来功能扩展\n- 确保跨浏览器兼容性和移动端响应式体验\n\n### 1.2 设计原则\n- **模块化设计**: 功能模块解耦，便于维护和扩展\n- **性能优先**: 采用懒加载、缓存等策略优化用户体验\n- **用户体验**: 直观的交互设计，流畅的语音对话体验\n- **安全可靠**: 数据传输加密，用户隐私保护\n- **代码复用**: 基于现有组件库和工具类进行扩展\n\n### 1.3 架构概览\n```\n┌─────────────────────────────────────────────────┐\n│                   前端应用层                      │\n├─────────────────────────────────────────────────┤\n│  角色搜索页  │  角色详情页  │  语音聊天页  │  个人中心  │\n├─────────────────────────────────────────────────┤\n│              业务组件层                          │\n├─────────────────────────────────────────────────┤\n│  RoleCard   │  VoiceChat   │  ChatHistory │  等  │\n├─────────────────────────────────────────────────┤\n│              服务层                              │\n├─────────────────────────────────────────────────┤\n│ RoleService │ VoiceService │ ChatService │ 等   │\n├─────────────────────────────────────────────────┤\n│              基础设施层                          │\n├─────────────────────────────────────────────────┤\n│    HTTP请求   │   WebSocket   │   语音API   │    │\n└─────────────────────────────────────────────────┘\n```\n\n## 2. 系统架构\n\n### 2.1 前端架构\n\n#### 2.1.1 页面路由设计\n```typescript\n// 在config/routes.ts中扩展现有路由\nexport default [\n  // ... 现有路由\n  {\n    path: '/role',\n    icon: 'robot',\n    name: 'AI角色',\n    routes: [\n      { path: '/role', redirect: '/role/discover' },\n      { path: '/role/discover', component: './Role/Discover', name: '发现角色' },\n      { path: '/role/search', component: './Role/Search', name: '搜索角色' },\n      { path: '/role/detail/:id', component: './Role/Detail', name: '角色详情' },\n      { path: '/role/chat/:id', component: './Role/Chat', name: '语音聊天' },\n      { path: '/role/history', component: './Role/History', name: '聊天记录' },\n      { path: '/role/favorites', component: './Role/Favorites', name: '收藏角色' },\n    ],\n  },\n  // ... 其他路由\n];\n```\n\n#### 2.1.2 状态管理设计\n基于UmiJS的model机制，创建以下状态管理模块：\n\n```typescript\n// src/models/roleModel.ts\nexport default {\n  namespace: 'role',\n  state: {\n    currentRole: null,\n    roleList: [],\n    categories: [],\n    favorites: [],\n    searchHistory: [],\n  },\n  effects: {\n    *fetchRoles({ payload }, { call, put }) { /* ... */ },\n    *searchRoles({ payload }, { call, put }) { /* ... */ },\n    *addToFavorites({ payload }, { call, put }) { /* ... */ },\n  },\n  reducers: {\n    setCurrentRole(state, { payload }) { /* ... */ },\n    setRoleList(state, { payload }) { /* ... */ },\n  },\n};\n\n// src/models/chatModel.ts  \nexport default {\n  namespace: 'chat',\n  state: {\n    currentChat: null,\n    chatHistory: [],\n    isRecording: false,\n    isPlaying: false,\n    messages: [],\n  },\n  effects: {\n    *sendMessage({ payload }, { call, put }) { /* ... */ },\n    *startVoiceChat({ payload }, { call, put }) { /* ... */ },\n  },\n  reducers: {\n    addMessage(state, { payload }) { /* ... */ },\n    setRecordingStatus(state, { payload }) { /* ... */ },\n  },\n};\n```\n\n### 2.2 后端接口设计\n\n#### 2.2.1 角色管理API类型定义\n```typescript\n// 扩展src/services/backend/typings.d.ts\ndeclare namespace API {\n  // 角色相关类型定义\n  type Role = {\n    id: number;\n    name: string;\n    avatar: string;\n    description: string;\n    category: string;\n    tags: string[];\n    personality: string;\n    background: string;\n    quotes: string[];\n    voiceStyle: string;\n    popularity: number;\n    createdAt: string;\n    updatedAt: string;\n  };\n\n  type RoleCategory = {\n    id: string;\n    name: string;\n    description: string;\n    icon: string;\n  };\n\n  type SearchRoleParams = {\n    keyword?: string;\n    category?: string;\n    page: number;\n    pageSize: number;\n  };\n\n  type SearchRoleResponse = {\n    roles: Role[];\n    total: number;\n    hasMore: boolean;\n  };\n\n  type FavoriteRoleRequest = {\n    roleId: number;\n  };\n}\n```\n\n#### 2.2.2 聊天相关API类型定义\n```typescript\ndeclare namespace API {\n  // 聊天相关类型定义\n  type ChatMessage = {\n    id: string;\n    roleId: number;\n    userId: number;\n    content: string;\n    type: 'text' | 'voice';\n    sender: 'user' | 'role';\n    timestamp: string;\n    voiceUrl?: string;\n    duration?: number;\n  };\n\n  type ChatSession = {\n    id: string;\n    roleId: number;\n    userId: number;\n    title: string;\n    messages: ChatMessage[];\n    createdAt: string;\n    updatedAt: string;\n  };\n\n  type SendMessageRequest = {\n    roleId: number;\n    content: string;\n    type: 'text' | 'voice';\n    voiceData?: string; // base64编码的音频数据\n  };\n\n  type SendMessageResponse = {\n    message: ChatMessage;\n    roleResponse: ChatMessage;\n  };\n}\n```\n\n### 2.3 数据流设计\n\n#### 2.3.1 语音聊天数据流\n```\n用户语音输入 → 语音识别(STT) → 文本处理 → AI对话生成 → 语音合成(TTS) → 音频播放\n     ↓              ↓              ↓              ↓              ↓\n   录音组件      语音服务API      聊天服务API      语音合成API      音频播放组件\n```\n\n#### 2.3.2 实时通信架构\n- **WebSocket连接**: 用于实时消息传输和状态同步\n- **HTTP请求**: 用于角色数据、历史记录等静态数据获取\n- **语音数据流**: 采用分块传输优化大文件处理\n\n## 3. 技术栈选择\n\n### 3.1 核心技术\n- **前端框架**: React 18 + TypeScript（继承现有架构）\n- **UI组件库**: Ant Design 5.x + Pro Components（继承现有）\n- **构建工具**: UmiJS 4.x（继承现有）\n- **状态管理**: UmiJS内置Model + React Hooks\n- **路由管理**: UmiJS内置路由系统\n\n### 3.2 语音技术栈\n- **语音录制**: Web Audio API + MediaRecorder API\n- **语音播放**: HTML5 Audio API\n- **实时通信**: WebSocket\n- **音频处理**: Web Audio API + AudioContext\n- **语音格式**: WebM for recording, MP3/WAV for playback\n\n### 3.3 新增依赖库\n```json\n{\n  \"dependencies\": {\n    \"socket.io-client\": \"^4.7.0\",\n    \"recordrtc\": \"^5.6.2\", \n    \"react-audio-player\": \"^0.17.0\",\n    \"wavesurfer.js\": \"^7.0.0\"\n  }\n}\n```\n\n## 4. 模块设计\n\n### 4.1 页面结构设计\n\n#### 4.1.1 角色发现页 (/role/discover)\n```typescript\n// src/pages/Role/Discover/index.tsx\nconst RoleDiscover: React.FC = () => {\n  return (\n    <PageContainer>\n      <CategoryTabs />\n      <PopularRoles />\n      <RecommendedRoles />\n      <RecentlyAdded />\n    </PageContainer>\n  );\n};\n```\n\n#### 4.1.2 语音聊天页 (/role/chat/:id)\n```typescript\n// src/pages/Role/Chat/index.tsx\nconst RoleChat: React.FC = () => {\n  return (\n    <PageContainer>\n      <ChatHeader />\n      <MessageList />\n      <VoiceControls />\n      <ChatInput />\n    </PageContainer>\n  );\n};\n```\n\n### 4.2 核心组件设计\n\n#### 4.2.1 角色卡片组件\n```typescript\n// src/components/Role/RoleCard/index.tsx\ninterface RoleCardProps {\n  role: API.Role;\n  onSelect?: (role: API.Role) => void;\n  onFavorite?: (roleId: number) => void;\n  showActions?: boolean;\n}\n\nconst RoleCard: React.FC<RoleCardProps> = ({\n  role,\n  onSelect,\n  onFavorite,\n  showActions = true\n}) => {\n  return (\n    <Card\n      hoverable\n      cover={<img src={role.avatar} alt={role.name} />}\n      actions={showActions ? [\n        <HeartOutlined onClick={() => onFavorite?.(role.id)} />,\n        <MessageOutlined onClick={() => onSelect?.(role)} />,\n        <MoreOutlined />\n      ] : undefined}\n    >\n      <Card.Meta\n        title={role.name}\n        description={role.description}\n      />\n      <div className=\"role-tags\">\n        {role.tags.map(tag => <Tag key={tag}>{tag}</Tag>)}\n      </div>\n    </Card>\n  );\n};\n```\n\n#### 4.2.2 语音控制组件\n```typescript\n// src/components/Voice/VoiceControls/index.tsx\ninterface VoiceControlsProps {\n  onStartRecording: () => void;\n  onStopRecording: () => void;\n  onPlayMessage: (messageId: string) => void;\n  isRecording: boolean;\n  isPlaying: boolean;\n}\n\nconst VoiceControls: React.FC<VoiceControlsProps> = ({\n  onStartRecording,\n  onStopRecording,\n  isRecording,\n  isPlaying\n}) => {\n  return (\n    <div className=\"voice-controls\">\n      <Button\n        type=\"primary\"\n        shape=\"circle\"\n        size=\"large\"\n        icon={isRecording ? <PauseOutlined /> : <AudioOutlined />}\n        onClick={isRecording ? onStopRecording : onStartRecording}\n        loading={isPlaying}\n      />\n      <div className=\"voice-status\">\n        {isRecording && <VoiceWaveform />}\n      </div>\n    </div>\n  );\n};\n```\n\n### 4.3 服务层设计\n\n#### 4.3.1 角色服务\n```typescript\n// src/services/backend/role.ts\nexport async function getRoles(params: API.SearchRoleParams) {\n  return request<API.SearchRoleResponse>('/api/roles', {\n    method: 'GET',\n    params,\n  });\n}\n\nexport async function getRoleDetail(id: number) {\n  return request<API.Role>(`/api/roles/${id}`, {\n    method: 'GET',\n  });\n}\n\nexport async function searchRoles(params: API.SearchRoleParams) {\n  return request<API.SearchRoleResponse>('/api/roles/search', {\n    method: 'GET',\n    params,\n  });\n}\n\nexport async function getRoleCategories() {\n  return request<API.RoleCategory[]>('/api/roles/categories', {\n    method: 'GET',\n  });\n}\n\nexport async function addToFavorites(body: API.FavoriteRoleRequest) {\n  return request('/api/users/favorites', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n  });\n}\n\nexport async function removeFromFavorites(roleId: number) {\n  return request(`/api/users/favorites/${roleId}`, {\n    method: 'DELETE',\n  });\n}\n```\n\n#### 4.3.2 语音服务工具类\n```typescript\n// src/utils/voiceService.ts\nexport class VoiceService {\n  private mediaRecorder: MediaRecorder | null = null;\n  private audioChunks: Blob[] = [];\n  private stream: MediaStream | null = null;\n\n  // 检查浏览器支持\n  static isSupported(): boolean {\n    return !!(navigator.mediaDevices && \n             navigator.mediaDevices.getUserMedia &&\n             window.MediaRecorder);\n  }\n\n  // 请求麦克风权限\n  async requestPermission(): Promise<boolean> {\n    try {\n      this.stream = await navigator.mediaDevices.getUserMedia({ \n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          sampleRate: 44100,\n        }\n      });\n      return true;\n    } catch (error) {\n      console.error('麦克风权限被拒绝:', error);\n      return false;\n    }\n  }\n\n  // 开始录音\n  async startRecording(): Promise<void> {\n    if (!this.stream) {\n      const hasPermission = await this.requestPermission();\n      if (!hasPermission) {\n        throw new Error('无法获取麦克风权限');\n      }\n    }\n\n    this.mediaRecorder = new MediaRecorder(this.stream!, {\n      mimeType: 'audio/webm;codecs=opus'\n    });\n    \n    this.mediaRecorder.ondataavailable = (event) => {\n      if (event.data.size > 0) {\n        this.audioChunks.push(event.data);\n      }\n    };\n\n    this.audioChunks = [];\n    this.mediaRecorder.start(100); // 每100ms收集一次数据\n  }\n\n  // 停止录音\n  async stopRecording(): Promise<Blob> {\n    return new Promise((resolve, reject) => {\n      if (!this.mediaRecorder) {\n        reject(new Error('录音器未初始化'));\n        return;\n      }\n\n      this.mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(this.audioChunks, { \n          type: 'audio/webm;codecs=opus' \n        });\n        this.audioChunks = [];\n        resolve(audioBlob);\n      };\n\n      this.mediaRecorder.onerror = (event) => {\n        reject(new Error('录音失败'));\n      };\n\n      this.mediaRecorder.stop();\n      \n      // 停止音频流\n      if (this.stream) {\n        this.stream.getTracks().forEach(track => track.stop());\n        this.stream = null;\n      }\n    });\n  }\n\n  // 播放音频\n  async playAudio(audioUrl: string): Promise<HTMLAudioElement> {\n    const audio = new Audio(audioUrl);\n    audio.preload = 'auto';\n    \n    return new Promise((resolve, reject) => {\n      audio.oncanplaythrough = () => resolve(audio);\n      audio.onerror = () => reject(new Error('音频加载失败'));\n      audio.load();\n    });\n  }\n\n  // 清理资源\n  cleanup(): void {\n    if (this.stream) {\n      this.stream.getTracks().forEach(track => track.stop());\n      this.stream = null;\n    }\n    if (this.mediaRecorder) {\n      this.mediaRecorder = null;\n    }\n    this.audioChunks = [];\n  }\n}\n```\n\n#### 4.3.3 聊天服务\n```typescript\n// src/services/backend/chat.ts\nexport async function sendMessage(body: API.SendMessageRequest) {\n  return request<API.SendMessageResponse>('/api/chat/messages', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n  });\n}\n\nexport async function uploadVoiceMessage(roleId: number, audioBlob: Blob) {\n  const formData = new FormData();\n  formData.append('roleId', roleId.toString());\n  formData.append('audio', audioBlob, 'voice.webm');\n  \n  return request<API.SendMessageResponse>('/api/chat/voice', {\n    method: 'POST',\n    data: formData,\n  });\n}\n\nexport async function getChatHistory(roleId: number) {\n  return request<API.ChatSession[]>(`/api/chat/sessions/${roleId}`, {\n    method: 'GET',\n  });\n}\n\nexport async function deleteChatSession(sessionId: string) {\n  return request(`/api/chat/sessions/${sessionId}`, {\n    method: 'DELETE',\n  });\n}\n```\n\n## 5. 接口设计\n\n### 5.1 RESTful API规范\n\n#### 5.1.1 角色相关接口\n```\nGET /api/roles                    # 获取角色列表\nGET /api/roles/:id               # 获取角色详情\nGET /api/roles/categories        # 获取角色分类\nGET /api/roles/search            # 搜索角色\nPOST /api/users/favorites        # 收藏角色\nDELETE /api/users/favorites/:roleId  # 取消收藏\nGET /api/users/favorites         # 获取收藏列表\n```\n\n#### 5.1.2 聊天相关接口\n```\nPOST /api/chat/messages          # 发送文本消息\nPOST /api/chat/voice             # 发送语音消息\nGET /api/chat/sessions/:roleId   # 获取聊天历史\nDELETE /api/chat/sessions/:sessionId  # 删除聊天记录\n```\n\n### 5.2 WebSocket事件定义\n\n#### 5.2.1 客户端发送事件\n```typescript\n// WebSocket连接管理\n// src/utils/socketService.ts\nimport { io, Socket } from 'socket.io-client';\n\nexport class SocketService {\n  private socket: Socket | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n\n  connect(roleId: number): void {\n    const token = TokenManager.getAccessToken();\n    \n    this.socket = io('/chat', {\n      query: { roleId },\n      auth: { token },\n      transports: ['websocket', 'polling'],\n    });\n\n    this.setupEventListeners();\n  }\n\n  private setupEventListeners(): void {\n    if (!this.socket) return;\n\n    this.socket.on('connect', () => {\n      console.log('WebSocket连接成功');\n      this.reconnectAttempts = 0;\n    });\n\n    this.socket.on('disconnect', () => {\n      console.log('WebSocket连接断开');\n      this.handleReconnect();\n    });\n\n    this.socket.on('message', (message: API.ChatMessage) => {\n      // 处理接收到的消息\n      this.handleMessage(message);\n    });\n  }\n\n  sendMessage(message: API.SendMessageRequest): void {\n    if (this.socket?.connected) {\n      this.socket.emit('sendMessage', message);\n    }\n  }\n\n  private handleReconnect(): void {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      setTimeout(() => {\n        this.socket?.connect();\n      }, 1000 * this.reconnectAttempts);\n    }\n  }\n\n  disconnect(): void {\n    this.socket?.disconnect();\n    this.socket = null;\n  }\n}\n```\n\n## 6. 性能优化\n\n### 6.1 加载优化\n\n#### 6.1.1 代码分割\n```typescript\n// 路由级别的懒加载\nimport { lazy } from 'react';\n\nconst RoleDiscover = lazy(() => import('./pages/Role/Discover'));\nconst RoleChat = lazy(() => import('./pages/Role/Chat'));\nconst RoleDetail = lazy(() => import('./pages/Role/Detail'));\n\n// 在路由配置中使用\n{\n  path: '/role/chat/:id',\n  component: RoleChat,\n}\n```\n\n#### 6.1.2 资源优化策略\n- **图片懒加载**: 角色头像使用Intersection Observer\n- **音频预加载**: 热门角色语音样本预加载\n- **缓存策略**: 角色数据本地缓存5分钟\n- **压缩优化**: 音频文件使用高压缩比格式\n\n### 6.2 运行时优化\n\n#### 6.2.1 React性能优化\n```typescript\n// 使用React.memo优化角色卡片渲染\nconst RoleCard = React.memo<RoleCardProps>(({ role, onSelect }) => {\n  const handleClick = useCallback(() => {\n    onSelect?.(role);\n  }, [role, onSelect]);\n\n  return (\n    <Card onClick={handleClick}>\n      {/* 卡片内容 */}\n    </Card>\n  );\n});\n\n// 使用useMemo缓存计算结果\nconst filteredRoles = useMemo(() => {\n  return roles.filter(role => \n    role.category === selectedCategory &&\n    role.name.toLowerCase().includes(searchKeyword.toLowerCase())\n  );\n}, [roles, selectedCategory, searchKeyword]);\n```\n\n#### 6.2.2 音频性能优化\n```typescript\n// 音频对象池管理\nclass AudioPool {\n  private pool: HTMLAudioElement[] = [];\n  private maxSize = 5;\n\n  getAudio(): HTMLAudioElement {\n    if (this.pool.length > 0) {\n      return this.pool.pop()!;\n    }\n    return new Audio();\n  }\n\n  releaseAudio(audio: HTMLAudioElement): void {\n    if (this.pool.length < this.maxSize) {\n      audio.pause();\n      audio.currentTime = 0;\n      audio.src = '';\n      this.pool.push(audio);\n    }\n  }\n}\n```\n\n### 6.3 缓存策略\n\n#### 6.3.1 数据缓存\n```typescript\n// 使用React Query进行数据缓存\nimport { useQuery } from 'react-query';\n\nconst useRoles = (category?: string) => {\n  return useQuery(\n    ['roles', category],\n    () => getRoles({ category, page: 1, pageSize: 20 }),\n    {\n      staleTime: 5 * 60 * 1000, // 5分钟内数据被认为是新鲜的\n      cacheTime: 10 * 60 * 1000, // 缓存保持10分钟\n      refetchOnWindowFocus: false,\n    }\n  );\n};\n```\n\n## 7. 安全设计\n\n### 7.1 身份认证集成\n```typescript\n// 扩展现有的TokenManager\nexport class TokenManager {\n  // ... 现有方法\n\n  // 为WebSocket连接提供认证\n  static getSocketAuthToken(): string | null {\n    return this.getAccessToken();\n  }\n\n  // 检查是否有聊天权限\n  static canAccessChat(): boolean {\n    return this.hasToken() && this.getUserId() !== null;\n  }\n}\n```\n\n### 7.2 输入验证和安全\n```typescript\n// 消息内容验证\nexport const validateMessage = (content: string): { valid: boolean; error?: string } => {\n  if (!content || content.trim().length === 0) {\n    return { valid: false, error: '消息内容不能为空' };\n  }\n  \n  if (content.length > 1000) {\n    return { valid: false, error: '消息内容不能超过1000字符' };\n  }\n\n  // 基础的敏感词过滤（实际项目中应使用专业的过滤服务）\n  const sensitiveWords = ['敏感词1', '敏感词2']; // 示例\n  const hasSensitiveWord = sensitiveWords.some(word => \n    content.toLowerCase().includes(word.toLowerCase())\n  );\n  \n  if (hasSensitiveWord) {\n    return { valid: false, error: '消息包含不当内容' };\n  }\n\n  return { valid: true };\n};\n\n// 音频文件验证\nexport const validateAudioFile = (file: File): { valid: boolean; error?: string } => {\n  const maxSize = 10 * 1024 * 1024; // 10MB\n  const allowedTypes = ['audio/webm', 'audio/mp3', 'audio/wav', 'audio/ogg'];\n  \n  if (file.size > maxSize) {\n    return { valid: false, error: '音频文件不能超过10MB' };\n  }\n  \n  if (!allowedTypes.includes(file.type)) {\n    return { valid: false, error: '不支持的音频格式' };\n  }\n  \n  return { valid: true };\n};\n```\n\n## 8. 部署架构\n\n### 8.1 构建配置优化\n\n#### 8.1.2 生产环境配置\n```typescript\n// config/config.prod.ts\nexport default {\n  define: {\n    API_BASE_URL: 'https://api.yourdomain.com',\n    WS_BASE_URL: 'wss://api.yourdomain.com',\n  },\n  hash: true,\n  publicPath: '/static/',\n  \n  // 代码分割优化\n  chunks: ['vendors', 'commons', 'umi'],\n  chainWebpack(config) {\n    config.optimization.splitChunks({\n      chunks: 'all',\n      cacheGroups: {\n        vendors: {\n          name: 'vendors',\n          test: /[\\\\/]node_modules[\\\\/]/,\n          priority: 10,\n          chunks: 'all',\n        },\n        commons: {\n          name: 'commons',\n          chunks: 'all',\n          minChunks: 2,\n          priority: 5,\n        },\n      },\n    });\n  },\n};\n```\n\n### 8.2 错误处理和监控\n\n#### 8.2.1 全局错误处理\n```typescript\n// src/utils/errorHandler.ts\nexport class ErrorHandler {\n  static handleApiError(error: any): string {\n    if (error.response) {\n      // 服务器响应错误\n      switch (error.response.status) {\n        case 401:\n          TokenManager.clearTokens();\n          window.location.href = '/user/login';\n          return '登录已过期，请重新登录';\n        case 403:\n          return '权限不足';\n        case 404:\n          return '请求的资源不存在';\n        case 500:\n          return '服务器内部错误';\n        default:\n          return error.response.data?.message || '请求失败';\n      }\n    } else if (error.request) {\n      // 网络错误\n      return '网络连接失败，请检查网络设置';\n    } else {\n      // 其他错误\n      return error.message || '未知错误';\n    }\n  }\n\n  static handleVoiceError(error: any): string {\n    if (error.name === 'NotAllowedError') {\n      return '麦克风权限被拒绝，请在浏览器设置中允许麦克风访问';\n    } else if (error.name === 'NotFoundError') {\n      return '未找到麦克风设备';\n    } else if (error.name === 'NotSupportedError') {\n      return '当前浏览器不支持语音功能';\n    }\n    return '语音功能异常，请稍后重试';\n  }\n}\n```\n\n### 8.3 监控和日志\n\n#### 8.3.1 性能监控\n```typescript\n// src/utils/monitor.ts\nexport class PerformanceMonitor {\n  // 页面加载性能监控\n  static trackPageLoad(pageName: string): void {\n    if ('performance' in window) {\n      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n      const loadTime = navigation.loadEventEnd - navigation.fetchStart;\n      \n      // 发送到监控服务\n      this.sendMetric('page_load_time', {\n        page: pageName,\n        loadTime,\n        timestamp: Date.now(),\n      });\n    }\n  }\n\n  // API响应时间监控\n  static trackApiCall(api: string, duration: number, success: boolean): void {\n    this.sendMetric('api_call', {\n      api,\n      duration,\n      success,\n      timestamp: Date.now(),\n    });\n  }\n\n  // 语音功能使用监控\n  static trackVoiceUsage(action: 'start_record' | 'stop_record' | 'play_audio', roleId?: number): void {\n    this.sendMetric('voice_usage', {\n      action,\n      roleId,\n      timestamp: Date.now(),\n    });\n  }\n\n  private static sendMetric(event: string, data: any): void {\n    // 实际项目中应发送到监控服务\n    console.log(`[Monitor] ${event}:`, data);\n  }\n}\n```\n\n通过这个详细的技术设计文档，我们为AI角色扮演聊天功能提供了完整的技术实现指南，确保能够在现有架构基础上高质量地实现所有需求功能。",
  "fileStats": {
    "size": 24457,
    "lines": 927,
    "lastModified": "2025-09-25T04:08:12.404Z"
  },
  "comments": []
}