// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheRoletalkCharacterIdPrefix = "cache:roletalk:character:id:"
)

type (
	characterModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Character) error

		FindOne(ctx context.Context, id int64) (*Character, error)
		Find(ctx context.Context, cursor int64, pageSize int64) ([]*Character, error)
		FindByQuery(ctx context.Context, cursor int64, pageSize int64, query map[string]interface{}) ([]*Character, error)
		FuzzyFind(ctx context.Context, cursor int64, pageSize int64, title string, keyword string) ([]*Character, error)

		Update(ctx context.Context, tx *gorm.DB, data *Character) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultCharacterModel struct {
		gormc.CachedConn
		table string
	}

	Character struct {
		Id            int64          `gorm:"column:id"`
		UserId        int64          `gorm:"column:user_id"`
		Name          string         `gorm:"column:name"`
		Description   string         `gorm:"column:description"`
		Background    string         `gorm:"column:background"`
		OpenLine      string         `gorm:"column:open_line"`
		Personality   sql.NullString `gorm:"column:personality"`
		InitialMemory sql.NullString `gorm:"column:initial_memory"`
		SystemPrompt  sql.NullString `gorm:"column:system_prompt"`
		AvatarUrl     sql.NullString `gorm:"column:avatar_url"`
		IsPublic      int64          `gorm:"column:is_public"`
		Status        int64          `gorm:"column:status"`
		CreatedAt     time.Time      `gorm:"column:created_at"`
		UpdatedAt     time.Time      `gorm:"column:updated_at"`
		DeletedAt     gorm.DeletedAt `gorm:"column:deleted_at;index"`
	}
)

func (Character) TableName() string {
	return "`character`"
}

func newCharacterModel(conn *gorm.DB, c cache.CacheConf) *defaultCharacterModel {
	return &defaultCharacterModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`character`",
	}
}

func (m *defaultCharacterModel) Insert(ctx context.Context, tx *gorm.DB, data *Character) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultCharacterModel) FindOne(ctx context.Context, id int64) (*Character, error) {
	roletalkCharacterIdKey := fmt.Sprintf("%s%v", cacheRoletalkCharacterIdPrefix, id)
	var resp Character
	err := m.QueryCtx(ctx, &resp, roletalkCharacterIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Character{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCharacterModel) Update(ctx context.Context, tx *gorm.DB, data *Character) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	clearKeys := append(m.getCacheKeys(old), m.getNewModelNeedReloadCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, clearKeys...)
	return err
}

func (m *defaultCharacterModel) getCacheKeys(data *Character) []string {
	if data == nil {
		return []string{}
	}
	roletalkCharacterIdKey := fmt.Sprintf("%s%v", cacheRoletalkCharacterIdPrefix, data.Id)
	cacheKeys := []string{
		roletalkCharacterIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultCharacterModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&Character{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultCharacterModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultCharacterModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheRoletalkCharacterIdPrefix, primary)
}

func (m *defaultCharacterModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Character{}).Where("`id` = ?", primary).Take(v).Error
}
