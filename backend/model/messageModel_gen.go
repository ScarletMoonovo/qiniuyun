// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheRoletalkMessageIdPrefix = "cache:roletalk:message:id:"
)

type (
	messageModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Message) error

		FindOne(ctx context.Context, id int64) (*Message, error)
		Find(ctx context.Context, cursor int64, pageSize int64) ([]*Message, error)
		FindByQuery(ctx context.Context, cursor int64, pageSize int64, query map[string]interface{}) ([]*Message, error)
		FuzzyFind(ctx context.Context, cursor int64, pageSize int64, title string, keyword string) ([]*Message, error)
		FindBySession(ctx context.Context, sessionId int64) ([]*Message, error)

		Update(ctx context.Context, tx *gorm.DB, data *Message) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultMessageModel struct {
		gormc.CachedConn
		table string
	}

	Message struct {
		Id        int64     `gorm:"column:id" json:"id"`
		SessionId int64     `gorm:"column:session_id" json:"session_id"` // 关联的会话ID
		Role      string    `gorm:"column:role" json:"role"`             // 消息角色
		Content   string    `gorm:"column:content" json:"content"`       // 消息内容
		Metadata  string    `gorm:"column:metadata" json:"metadata"`
		CreatedAt time.Time `gorm:"column:created_at" json:"created_at"`
	}
)

func (Message) TableName() string {
	return "`message`"
}

func newMessageModel(conn *gorm.DB, c cache.CacheConf) *defaultMessageModel {
	return &defaultMessageModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`message`",
	}
}

func (m *defaultMessageModel) Insert(ctx context.Context, tx *gorm.DB, data *Message) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultMessageModel) FindOne(ctx context.Context, id int64) (*Message, error) {
	roletalkMessageIdKey := fmt.Sprintf("%s%v", cacheRoletalkMessageIdPrefix, id)
	var resp Message
	err := m.QueryCtx(ctx, &resp, roletalkMessageIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Message{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMessageModel) Update(ctx context.Context, tx *gorm.DB, data *Message) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	clearKeys := append(m.getCacheKeys(old), m.getNewModelNeedReloadCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, clearKeys...)
	return err
}

func (m *defaultMessageModel) getCacheKeys(data *Message) []string {
	if data == nil {
		return []string{}
	}
	roletalkMessageIdKey := fmt.Sprintf("%s%v", cacheRoletalkMessageIdPrefix, data.Id)
	cacheKeys := []string{
		roletalkMessageIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultMessageModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&Message{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultMessageModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultMessageModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheRoletalkMessageIdPrefix, primary)
}

func (m *defaultMessageModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Message{}).Where("`id` = ?", primary).Take(v).Error
}
