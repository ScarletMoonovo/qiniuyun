// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheRoletalkCharacterTagIdPrefix               = "cache:roletalk:characterTag:id:"
	cacheRoletalkCharacterTagTagIdCharacterIdPrefix = "cache:roletalk:characterTag:tagId:characterId:"
)

type (
	characterTagModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *CharacterTag) error
		Inserts(ctx context.Context, tx *gorm.DB, data *[]CharacterTag) error

		FindOne(ctx context.Context, id int64) (*CharacterTag, error)
		Find(ctx context.Context, cursor int64, pageSize int64) ([]*CharacterTag, error)
		GetRandom(ctx context.Context, n, tagId int64) ([]*CharacterTag, error)
		FindByQuery(ctx context.Context, cursor int64, pageSize int64, query map[string]interface{}) ([]*CharacterTag, error)
		FuzzyFind(ctx context.Context, cursor int64, pageSize int64, title string, keyword string) ([]*CharacterTag, error)

		FindOneByTagIdCharacterId(ctx context.Context, tagId int64, characterId int64) (*CharacterTag, error)
		Update(ctx context.Context, tx *gorm.DB, data *CharacterTag) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultCharacterTagModel struct {
		gormc.CachedConn
		table string
	}

	CharacterTag struct {
		Id          int64          `gorm:"column:id"`
		CharacterId int64          `gorm:"column:character_id"`
		TagId       int64          `gorm:"column:tag_id"`
		CreatedAt   time.Time      `gorm:"column:created_at"`
		UpdatedAt   time.Time      `gorm:"column:updated_at"`
		DeletedAt   gorm.DeletedAt `gorm:"column:deleted_at;index"`
	}
)

func (CharacterTag) TableName() string {
	return "`character_tag`"
}

func newCharacterTagModel(conn *gorm.DB, c cache.CacheConf) *defaultCharacterTagModel {
	return &defaultCharacterTagModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`character_tag`",
	}
}

func (m *defaultCharacterTagModel) Insert(ctx context.Context, tx *gorm.DB, data *CharacterTag) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultCharacterTagModel) FindOne(ctx context.Context, id int64) (*CharacterTag, error) {
	roletalkCharacterTagIdKey := fmt.Sprintf("%s%v", cacheRoletalkCharacterTagIdPrefix, id)
	var resp CharacterTag
	err := m.QueryCtx(ctx, &resp, roletalkCharacterTagIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&CharacterTag{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCharacterTagModel) FindOneByTagIdCharacterId(ctx context.Context, tagId int64, characterId int64) (*CharacterTag, error) {
	roletalkCharacterTagTagIdCharacterIdKey := fmt.Sprintf("%s%v:%v", cacheRoletalkCharacterTagTagIdCharacterIdPrefix, tagId, characterId)
	var resp CharacterTag
	err := m.QueryRowIndexCtx(ctx, &resp, roletalkCharacterTagTagIdCharacterIdKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&CharacterTag{}).Where("`tag_id` = ? and `character_id` = ?", tagId, characterId).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCharacterTagModel) Update(ctx context.Context, tx *gorm.DB, data *CharacterTag) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	clearKeys := append(m.getCacheKeys(old), m.getNewModelNeedReloadCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, clearKeys...)
	return err
}

func (m *defaultCharacterTagModel) getCacheKeys(data *CharacterTag) []string {
	if data == nil {
		return []string{}
	}
	roletalkCharacterTagIdKey := fmt.Sprintf("%s%v", cacheRoletalkCharacterTagIdPrefix, data.Id)
	roletalkCharacterTagTagIdCharacterIdKey := fmt.Sprintf("%s%v:%v", cacheRoletalkCharacterTagTagIdCharacterIdPrefix, data.TagId, data.CharacterId)
	cacheKeys := []string{
		roletalkCharacterTagIdKey, roletalkCharacterTagTagIdCharacterIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultCharacterTagModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&CharacterTag{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultCharacterTagModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultCharacterTagModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheRoletalkCharacterTagIdPrefix, primary)
}

func (m *defaultCharacterTagModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&CharacterTag{}).Where("`id` = ?", primary).Take(v).Error
}
