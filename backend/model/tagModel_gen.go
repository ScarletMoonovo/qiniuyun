// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheRoletalkTagIdPrefix   = "cache:roletalk:tag:id:"
	cacheRoletalkTagNamePrefix = "cache:roletalk:tag:name:"
)

type (
	tagModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Tag) error

		FindOne(ctx context.Context, id int64) (*Tag, error)
		Find(ctx context.Context, cursor int64, pageSize int64) ([]*Tag, error)
		FindAll(ctx context.Context) ([]*Tag, error)
		FindByQuery(ctx context.Context, cursor int64, pageSize int64, query map[string]interface{}) ([]*Tag, error)
		FuzzyFind(ctx context.Context, cursor int64, pageSize int64, title string, keyword string) ([]*Tag, error)

		FindOneByName(ctx context.Context, name string) (*Tag, error)
		Update(ctx context.Context, tx *gorm.DB, data *Tag) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultTagModel struct {
		gormc.CachedConn
		table string
	}

	Tag struct {
		Id        int64          `gorm:"column:id"`
		Name      string         `gorm:"column:name"`
		CreatedAt time.Time      `gorm:"column:created_at"`
		UpdatedAt time.Time      `gorm:"column:updated_at"`
		DeletedAt gorm.DeletedAt `gorm:"column:deleted_at;index"`
	}
)

func (Tag) TableName() string {
	return "`tag`"
}

func newTagModel(conn *gorm.DB, c cache.CacheConf) *defaultTagModel {
	return &defaultTagModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`tag`",
	}
}

func (m *defaultTagModel) Insert(ctx context.Context, tx *gorm.DB, data *Tag) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultTagModel) FindOne(ctx context.Context, id int64) (*Tag, error) {
	roletalkTagIdKey := fmt.Sprintf("%s%v", cacheRoletalkTagIdPrefix, id)
	var resp Tag
	err := m.QueryCtx(ctx, &resp, roletalkTagIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Tag{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTagModel) FindOneByName(ctx context.Context, name string) (*Tag, error) {
	roletalkTagNameKey := fmt.Sprintf("%s%v", cacheRoletalkTagNamePrefix, name)
	var resp Tag
	err := m.QueryRowIndexCtx(ctx, &resp, roletalkTagNameKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&Tag{}).Where("`name` = ?", name).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTagModel) Update(ctx context.Context, tx *gorm.DB, data *Tag) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	clearKeys := append(m.getCacheKeys(old), m.getNewModelNeedReloadCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, clearKeys...)
	return err
}

func (m *defaultTagModel) getCacheKeys(data *Tag) []string {
	if data == nil {
		return []string{}
	}
	roletalkTagIdKey := fmt.Sprintf("%s%v", cacheRoletalkTagIdPrefix, data.Id)
	roletalkTagNameKey := fmt.Sprintf("%s%v", cacheRoletalkTagNamePrefix, data.Name)
	cacheKeys := []string{
		roletalkTagIdKey, roletalkTagNameKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultTagModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&Tag{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultTagModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultTagModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheRoletalkTagIdPrefix, primary)
}

func (m *defaultTagModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Tag{}).Where("`id` = ?", primary).Take(v).Error
}
