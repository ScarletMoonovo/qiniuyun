// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheRoletalkUserTagIdPrefix          = "cache:roletalk:userTag:id:"
	cacheRoletalkUserTagUserIdTagIdPrefix = "cache:roletalk:userTag:userId:tagId:"
)

type (
	userTagModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *UserTag) error

		FindOne(ctx context.Context, id int64) (*UserTag, error)
		Find(ctx context.Context, cursor int64, pageSize int64) ([]*UserTag, error)
		FindByUserId(ctx context.Context, userId int64) ([]*UserTag, error)
		FindByQuery(ctx context.Context, cursor int64, pageSize int64, query map[string]interface{}) ([]*UserTag, error)
		FuzzyFind(ctx context.Context, cursor int64, pageSize int64, title string, keyword string) ([]*UserTag, error)

		FindOneByUserIdTagId(ctx context.Context, userId int64, tagId int64) (*UserTag, error)
		Update(ctx context.Context, tx *gorm.DB, data *UserTag) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserTagModel struct {
		gormc.CachedConn
		table string
	}

	UserTag struct {
		Id        int64          `gorm:"column:id"`
		UserId    int64          `gorm:"column:user_id"`
		TagId     int64          `gorm:"column:tag_id"`
		CreatedAt time.Time      `gorm:"column:created_at"`
		UpdatedAt time.Time      `gorm:"column:updated_at"`
		DeletedAt gorm.DeletedAt `gorm:"column:deleted_at;index"`
	}
)

func (UserTag) TableName() string {
	return "`user_tag`"
}

func newUserTagModel(conn *gorm.DB, c cache.CacheConf) *defaultUserTagModel {
	return &defaultUserTagModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user_tag`",
	}
}

func (m *defaultUserTagModel) Insert(ctx context.Context, tx *gorm.DB, data *UserTag) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserTagModel) FindOne(ctx context.Context, id int64) (*UserTag, error) {
	roletalkUserTagIdKey := fmt.Sprintf("%s%v", cacheRoletalkUserTagIdPrefix, id)
	var resp UserTag
	err := m.QueryCtx(ctx, &resp, roletalkUserTagIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&UserTag{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserTagModel) FindOneByUserIdTagId(ctx context.Context, userId int64, tagId int64) (*UserTag, error) {
	roletalkUserTagUserIdTagIdKey := fmt.Sprintf("%s%v:%v", cacheRoletalkUserTagUserIdTagIdPrefix, userId, tagId)
	var resp UserTag
	err := m.QueryRowIndexCtx(ctx, &resp, roletalkUserTagUserIdTagIdKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&UserTag{}).Where("`user_id` = ? and `tag_id` = ?", userId, tagId).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserTagModel) Update(ctx context.Context, tx *gorm.DB, data *UserTag) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	clearKeys := append(m.getCacheKeys(old), m.getNewModelNeedReloadCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, clearKeys...)
	return err
}

func (m *defaultUserTagModel) getCacheKeys(data *UserTag) []string {
	if data == nil {
		return []string{}
	}
	roletalkUserTagIdKey := fmt.Sprintf("%s%v", cacheRoletalkUserTagIdPrefix, data.Id)
	roletalkUserTagUserIdTagIdKey := fmt.Sprintf("%s%v:%v", cacheRoletalkUserTagUserIdTagIdPrefix, data.UserId, data.TagId)
	cacheKeys := []string{
		roletalkUserTagIdKey, roletalkUserTagUserIdTagIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultUserTagModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&UserTag{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserTagModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultUserTagModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheRoletalkUserTagIdPrefix, primary)
}

func (m *defaultUserTagModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&UserTag{}).Where("`id` = ?", primary).Take(v).Error
}
