// Code generated by goctl. DO NOT EDIT.
package types

type CaptchaRequest struct {
	Email string `json:"email" validate:"email"`
}

type ChangePwdRequest struct {
	Password string `json:"password" validate:"alphanum,min=8,max=16"`
}

type Character struct {
	Id          int64    `json:"id"`
	Background  string   `json:"background"`
	Name        string   `json:"name"`
	Avatar      string   `json:"avatar"`
	Description string   `json:"description"`
	OpenLine    string   `json:"open_line"`
	Tags        []string `json:"tags"`
	IsPublic    bool     `json:"is_public"`
	UserId      int64    `json:"user_id"`
	CreatedAt   int64    `json:"created_at"`
	UpdatedAt   int64    `json:"updated_at"`
}

type ChatRequest struct {
	SessionId int64 `path:"session_id"`
}

type GetSessionRequest struct {
	Cursor   int64 `form:"cursor"`
	PageSize int64 `form:"pageSize"`
}

type GetSessionResponse struct {
	Sessions []Session `json:"sessions"`
}

type GetUserByNameRequest struct {
	Name     string `form:"name" validate:"required,excludesall=;#<>"`
	Cursor   int64  `form:"cursor"`
	PageSize int64  `form:"pageSize"`
}

type GetUserByNameResponse struct {
	Users []User `json:"users"`
}

type GetUserRequest struct {
	ID int64 `path:"id"`
}

type GetUserResponse struct {
	User User `json:"user"`
}

type LoginRequest struct {
	Email    string `json:"email" validate:"email"`
	Password string `json:"password,optional"`
	Captcha  string `json:"captcha,optional"`
}

type LoginResponse struct {
	ID           int64  `json:"id"`
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

type Message struct {
	Role      string `json:"role"`
	Content   string `json:"content"`
	CreatedAt int64  `json:"created_at"`
}

type NewCharacterRequest struct {
	Background  string  `json:"background"`
	Name        string  `json:"name"`
	Avatar      string  `json:"avatar"`
	Description string  `json:"description"`
	OpenLine    string  `json:"open_line"`
	Voice       string  `json:"voice"`
	Tags        []int64 `json:"tags"`
	IsPublic    bool    `json:"is_public"`
}

type NewCharacterResponse struct {
	Character Character `json:"character"`
}

type NewSessionRequest struct {
	CharacterId int64 `json:"character_id"`
}

type NewSessionResponse struct {
	SessionId int64 `json:"session_id"`
}

type RefreshResponse struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

type RegisterRequest struct {
	Email    string `json:"email" validate:"email"`
	Captcha  string `json:"captcha" validate:"number,len=6"`
	Name     string `json:"name" validate:"required,excludesall=;#<>"`
	Password string `json:"password" validate:"alphanum,min=8,max=16"`
}

type RegisterResponse struct {
	ID           int64  `json:"id"`
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

type Session struct {
	SessionId   int64  `json:"session_id"`
	UserId      int64  `json:"user_id"`
	CharacterId int64  `json:"character_id"`
	Title       string `json:"title"`
	CreatedAt   int64  `json:"created_at"`
	UpdatedAt   int64  `json:"updated_at"`
}

type Tag struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

type UploadTokenRequest struct {
	Url string `json:"url,optional"`
	Key string `json:"key,optional"`
}

type UploadTokenResponse struct {
	Url    string `json:"url"`
	Token  string `json:"token"`
	Expire int64  `json:"expire"`
	Key    string `json:"key"`
}

type User struct {
	ID        int64  `json:"id"`
	Name      string `json:"name"`
	Avatar    string `json:"avatar"`
	Birthday  int64  `json:"birthday,optional"`
	Sex       string `json:"sex,options=[male,female],optional"`
	Signature string `json:"signature,optional"`
}

type GetCharacterRequest struct {
	PageSize int64 `form:"page_size"`
	UserId   int64 `form:"user_id,optional"`
	Tag      int64 `form:"tag,optional"`
}

type GetCharacterResponse struct {
	Characters []Character `json:"characters"`
}
